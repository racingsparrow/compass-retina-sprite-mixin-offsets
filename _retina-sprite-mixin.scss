//  example sass/css usage

// span.spotify {
//   @include icon (spotify, 10px, 3px, retina, 12px, 3px);
//   width: 40px;
//   height: 40px;
//   display: inline-block;
// }

//if the 2nd set of offsets overide the 1st, but are not mandatory

//set to  true/false
$retina-debug-mode: false;

// inter change the following when in development phases....
$media-query: "(-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 2)";
// $media-query: "screen and (max-width: 600px)";
 



//default icon sprite spacing
$sprite-padding: 30px;

$sprites: sprite-map("sprites/*.png", $spacing: $sprite-padding, 
  $sprites-spotify-spacing: 100px,
  $sprites-spotify-position: 100%,
  $sprites-pinterest-spacing: 200px); // the closing tag must be on this last line for it to work.


//the individual retina spacings - positions in px must be doubled.
$sprites-retina: sprite-map("sprites-retina/*.png", $spacing: $sprite-padding * 2,
  $sprites-retina-spotify-spacing: 200px,
  $sprites-retina-spotify-position: 100%); // the closing tag must be on this last line for it to work.






// mixin starts

%bg-normal {
    background-image: sprite-url($sprites);
    background-repeat: no-repeat;
} 

%bg-retina {
  @media #{$media-query} {
    // background-color: darkgreen;
    background-image: sprite-url($sprites-retina);
    @include background-size(round(image-width(sprite-path($sprites-retina)) / 2) auto);
  }

  @if $retina-debug-mode  == true { 
    // background-color: lime;
    background-image: sprite-url($sprites-retina);
    @include background-size(round(image-width(sprite-path($sprites-retina)) / 2) auto);
   }
//
}


@mixin icon($name, $offset-x: 0, $offset-y:0, $retina-switch: false, $retina-offset-x: 0, $retina-offset-y: 0 ) {

  @extend %bg-normal;
  background-position: sprite-position($sprites, $name, $offset-x, $offset-y);

  @if $retina-switch == retina {
    @extend %bg-retina;
    @if $retina-offset-x == 0 { $retina-offset-x: $offset-x; }
    @if $retina-offset-y == 0 { $retina-offset-y: $offset-y; }
    $retina-unit: unit($retina-offset-x);
    $vert-pos: round(nth(sprite-position($sprites-retina, $name), 2) / 2);
  
        @media #{$media-query} {
            @if $retina-unit == "%" { background-position: $retina-offset-x $vert-pos+$retina-offset-y; } // percentage horizontal 

            @else { 
              $hor-pos: round(nth(sprite-position($sprites-retina, $name), 1) / 2);
              background-position: $hor-pos+$retina-offset-x $vert-pos+$retina-offset-y; // pixel horizontal
            }
        } // end media query

        @if $retina-debug-mode  == true {
           @if $retina-unit == "%" { background-position: $retina-offset-x $vert-pos+$retina-offset-y; } // percentage horizontal 

            @else { 
              $hor-pos: round(nth(sprite-position($sprites-retina, $name), 1) / 2);
              background-position: $hor-pos+$retina-offset-x $vert-pos+$retina-offset-y; // pixel horizontal
            }
        }
  // end if retina switch
  }
// end mixin
}




@if $retina-debug-mode  == true {
  @debug "- - RETINA DEBUG MODE ACTIVE ";
  html { 
    border-bottom: 20px solid red; 
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
//
}
